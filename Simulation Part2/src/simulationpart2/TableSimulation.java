/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulationpart2;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;

/**
 *
 * @author Karim
 */
public class TableSimulation extends javax.swing.JFrame {

    /**
     * Creates new form TableSimulation
     */
    public TableSimulation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Day Simulation");
        jLabel1.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Number of Days: ");

        jTextField1.setText("10");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Number of Tries:");

        jTextField2.setText("5");

        jLabel3.setText("N (Review):");

        jTextField3.setText("5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(495, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(494, 494, 494))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Get Values from GUI
        int Days = Integer.valueOf(jTextField1.getText());
        int Tries = Integer.valueOf(jTextField2.getText());
        int N = Integer.valueOf(jTextField3.getText());
        //Calendar Object
        Calendar calendar = new Calendar();

        // ArrayList of Runs of Days
        ArrayList<ArrayList<CarDealer_Day>> fullTable = new ArrayList<>();
        for (int i = 0; i < Tries; i++) {
            //Calculate Run
            ArrayList<CarDealer_Day> table = calendar.calculateTable(Days, N);
            //Add Run to ArrayList of Runs
            fullTable.add(table);
        }

        //Get Last Run
        ArrayList<CarDealer_Day> table = fullTable.get(fullTable.size() - 1);

        //Set Table Model
        DefaultTableModel model = new DefaultTableModel(table.size(), 7);
        jTable1.setModel(model);

        //Set Table Headers
        String[] Headers = {"RV Demand", "Demand", "RV Lead", "Lead", "Scheduled", "Inventory", "Shortage"};

        //Set Column Names
        for (int i = 0; i < 7; i++) {
            TableColumn column1 = jTable1.getTableHeader().getColumnModel().getColumn(i);
            column1.setHeaderValue(Headers[i]);
        }
        //Statistics Variables
        double runAverageEndInv = 0;
        double shortageCounter = 0;
        for (int i = 0; i < table.size(); i++) {
            //Set Values in Table
            jTable1.setValueAt(table.get(i).getRvDemand(), i, 0);
            jTable1.setValueAt(table.get(i).getDemand(), i, 1);
            jTable1.setValueAt(table.get(i).getRvLead(), i, 2);
            jTable1.setValueAt(table.get(i).getLead(), i, 3);
            jTable1.setValueAt(table.get(i).getScheduled(), i, 4);
            jTable1.setValueAt(table.get(i).getInventory(), i, 5);
            jTable1.setValueAt(table.get(i).getShortage(), i, 6);
            
            runAverageEndInv += table.get(i).getInventory();
            if (table.get(i).getShortage() > 0) {
                shortageCounter++;
            }

        }
        //Division to calclulate Statistics
        runAverageEndInv = runAverageEndInv / table.size();

        //Varaibles to Show Total Runs Statistics
        double totalRunsAverage = 0;
        double totalRunsShortage = 0;
        double totalRunsDemand = 0;
        double totalRunsLead = 0;
        double totalScheduledPerN = 0;
       
        //Statistics for Single Runs
        double singleRunShortage = 0;
        double singleRunDemand = 0;
        double singleRunLead = 0;
        double ScheduledPerN = 0;
        
        //Histogram Arrays 
        double average = 0;
        double[] Hist_Avg_values = new double[fullTable.size()];
        double[] Hist_Shrt_values = new double[fullTable.size()];
        double[] Hist_Demand_values = new double[fullTable.size()];
        double[] Hist_Lead_values = new double[fullTable.size()];
        double[] Hist_Scheduled_values = new double[fullTable.size()];
        int i = 0;

        //Loop over Each Run in fullTable
        for (ArrayList<CarDealer_Day> singleRun : fullTable) {
            average = 0;
            singleRunShortage = 0;
            singleRunDemand = 0;
            singleRunLead = 0;
            ScheduledPerN = 0;
            
            //Each Day in Single Run Calculate Statistics for Shortage
            for (CarDealer_Day day : singleRun) {
                average += day.getInventory();
                if (day.getShortage() > 0) {
                    singleRunShortage++;
                    totalRunsShortage++;
                }
                singleRunDemand += day.getDemand();
                singleRunLead += day.getLead();
            }
            //Add Histogram values to Array
            Hist_Avg_values[i] = average / singleRun.size();
            Hist_Shrt_values[i] = singleRunShortage;
            Hist_Demand_values[i] = singleRunDemand / singleRun.size();
            Hist_Lead_values[i] = singleRunLead / singleRun.size();
                    
            //Total Runs Statistics Calculations
            totalRunsAverage += (average / singleRun.size());
            totalRunsDemand += (singleRunDemand / singleRun.size());
            totalRunsLead += (singleRunLead / singleRun.size());
            
            for(int j = 0; j < singleRun.size();j++){
                if(singleRun.get(j).getLead() > 0){
                    ScheduledPerN += singleRun.get(j).getScheduled();
                    j += singleRun.get(j).getLead();
                }
            }
            Hist_Scheduled_values[i] = ScheduledPerN;
            totalScheduledPerN += ScheduledPerN;
            
            i++;
        }

        //Total Statistics Divsion
        totalRunsAverage /= fullTable.size();
        totalRunsShortage /= fullTable.size();
        totalRunsDemand /= fullTable.size();
        totalRunsLead /= fullTable.size();
        totalScheduledPerN = totalScheduledPerN / fullTable.size();
        
        //Create GUI to Display Statistics
        TableStatistics StatsGUI = new TableStatistics(runAverageEndInv, shortageCounter, totalRunsAverage, totalRunsShortage, singleRunDemand / fullTable.get(fullTable.size() - 1).size(), totalRunsDemand, singleRunLead / fullTable.get(fullTable.size() - 1).size(), totalRunsLead, totalScheduledPerN);
        StatsGUI.setVisible(true);

        //Create Datasets for Histogram
        HistogramDataset Avg_dataset = new HistogramDataset();
        HistogramDataset Shrt_dataset = new HistogramDataset();
        HistogramDataset Demand_dataset = new HistogramDataset();
        HistogramDataset Lead_dataset = new HistogramDataset();
        HistogramDataset Scheduled_dataset = new HistogramDataset();
        
        Avg_dataset.setType(HistogramType.RELATIVE_FREQUENCY);
        Shrt_dataset.setType(HistogramType.RELATIVE_FREQUENCY);
        Demand_dataset.setType(HistogramType.RELATIVE_FREQUENCY);
        Lead_dataset.setType(HistogramType.RELATIVE_FREQUENCY);
        Scheduled_dataset.setType(HistogramType.RELATIVE_FREQUENCY);
        
        //Use Arrays to initialize the histogram datasets
        Avg_dataset.addSeries("Histogram", Hist_Avg_values, 15);
        Shrt_dataset.addSeries("Histogram", Hist_Shrt_values, 15);
        Demand_dataset.addSeries("Histogram", Hist_Demand_values, 15);
        Lead_dataset.addSeries("Histogram", Hist_Lead_values, 15);
        Scheduled_dataset.addSeries("Histogram", Hist_Scheduled_values, 15);
                
        //Create Charts
        JFreeChart Histogram_AvgInv = ChartFactory.createHistogram("Histogram (Average Ending Inventory)", "Average", "Occurences (%)", Avg_dataset, PlotOrientation.VERTICAL, false, false, false);
        JFreeChart Histogram_Shrtage = ChartFactory.createHistogram("Histogram (Shortage of Inventory)", "Shortage", "Occurences (%)", Shrt_dataset, PlotOrientation.VERTICAL, false, false, false);
        JFreeChart Histogram_Demand = ChartFactory.createHistogram("Histogram (Demand of Inventory)", "Demand", "Occurences (%)", Demand_dataset, PlotOrientation.VERTICAL, false, false, false);
        JFreeChart Histogram_Lead = ChartFactory.createHistogram("Histogram (Lead time of Inventory)", "Lead Time", "Occurences (%)", Lead_dataset, PlotOrientation.VERTICAL, false, false, false);
        JFreeChart Histogram_Scheduled = ChartFactory.createHistogram("Histogram (Scheduled Per N)", "Scheduled per N", "Occurences (%)", Scheduled_dataset, PlotOrientation.VERTICAL, false, false, false);
        
        
        //Add Charts to Panel
        ChartPanel Histogram_Avg_Panel = new ChartPanel(Histogram_AvgInv);
        ChartPanel Histogram_Shrt_Panel = new ChartPanel(Histogram_Shrtage);
        ChartPanel Histogram_Demand_Panel = new ChartPanel(Histogram_Demand);
        ChartPanel Histogram_Lead_Panel = new ChartPanel(Histogram_Lead);
        ChartPanel Histogram_Scheduled_Panel = new ChartPanel(Histogram_Scheduled);
        
        //Pass panel to GUI to display
        StatisticsGUI Avg_GUI = new StatisticsGUI(Histogram_Avg_Panel);
        Avg_GUI.setVisible(true);
        StatisticsGUI Shrt_GUI = new StatisticsGUI(Histogram_Shrt_Panel);
        Shrt_GUI.setVisible(true);
        StatisticsGUI Demand_GUI = new StatisticsGUI(Histogram_Demand_Panel);
        Demand_GUI.setVisible(true);
        StatisticsGUI Lead_GUI = new StatisticsGUI(Histogram_Lead_Panel);
        Lead_GUI.setVisible(true);
        StatisticsGUI Scheduled_GUI = new StatisticsGUI(Histogram_Scheduled_Panel);
        Scheduled_GUI.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableSimulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableSimulation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
